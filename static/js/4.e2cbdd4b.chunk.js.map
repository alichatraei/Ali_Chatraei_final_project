{"version":3,"sources":["containers/Auth/Auth.js"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","e","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","loading","error","isAuth","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","errorMessage","message","authRedirect","to","title","className","clicked","btnType","onSubmit","Component","connect","auth","token","dispatch","actions"],"mappings":"kQAaMA,E,4MACJC,MAAQ,CACNC,SAAU,CACRC,MAAO,CACLC,YAAa,QACbC,cAAe,CACbC,KAAM,QACNC,YAAa,2DAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,EACVC,SAAS,GAEXC,OAAO,EACPC,SAAS,GAEXC,SAAU,CACRV,YAAa,QACbC,cAAe,CACbC,KAAM,WACNC,YAAa,+CAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,EACVK,UAAW,GAEbH,OAAO,EACPC,SAAS,IAGbG,UAAU,G,EAGZC,oBAAsB,SAACC,EAAGC,GACxB,IAAMC,EAAe,2BAChB,EAAKnB,MAAMC,UADK,kBAIlBiB,EAJkB,2BAKd,EAAKlB,MAAMC,SAASiB,IALN,IAMjBX,MAAOU,EAAEG,OAAOb,MAChBI,MAAOU,YACLJ,EAAEG,OAAOb,MACT,EAAKP,MAAMC,SAASiB,GAAaV,YAEnCI,SAAS,MAIb,EAAKU,SAAS,CACZrB,SAAUkB,K,EAIdI,cAAgB,SAACN,GACfA,EAAEO,iBAEF,EAAKC,MAAMC,OACT,EAAK1B,MAAMC,SAASC,MAAMK,MAC1B,EAAKP,MAAMC,SAASY,SAASN,MAC7B,EAAKP,MAAMe,W,EAIfY,sBAAwB,WACtB,EAAKL,UAAS,SAACM,GACb,MAAO,CACLb,UAAWa,EAAUb,c,4CAK3B,WAAU,IAAD,SAC4Bc,KAAKJ,MAAhCK,EADD,EACCA,QAASC,EADV,EACUA,MAAOC,EADjB,EACiBA,OADjB,EAEwBH,KAAK7B,MAA5BC,EAFD,EAECA,SAAUc,EAFX,EAEWA,SAGZkB,EAAoB,GAC1B,IAAK,IAAIC,KAAOjC,EACdgC,EAAkBE,KAAK,CACrBC,GAAIF,EACJG,OAAQpC,EAASiC,KAIrB,IAAII,EAAOL,EAAkBM,KAAI,SAACC,GAAD,OAC/B,cAAC,IAAD,CAEErC,YAAaqC,EAAYH,OAAOlC,YAChCC,cAAeoC,EAAYH,OAAOjC,cAClCG,MAAOiC,EAAYH,OAAO9B,MAC1BkC,SAAUD,EAAYH,OAAO1B,MAC7B+B,eAAgBF,EAAYH,OAAO7B,WACnCI,QAAS4B,EAAYH,OAAOzB,QAC5B+B,QAAS,SAAC1B,GAAD,OAAO,EAAKD,oBAAoBC,EAAGuB,EAAYJ,MAPnDI,EAAYJ,OAYjBN,IACFQ,EAAO,cAAC,IAAD,KAIT,IAAIM,EAAe,KACfb,IACFa,EAAe,4BAAIb,EAAMc,WAI3B,IAAIC,EAAe,KACfd,IACFc,EAAe,cAAC,IAAD,CAAUC,GAAG,OAG9B,IAAIC,EACF,oBAAIC,UAAU,aAAd,8QASF,OALKlC,IACHiC,EACE,oBAAIC,UAAU,aAAd,gNAIF,qCACE,cAAC,IAAD,IACA,sBAAKA,UAAU,iBAAf,UACGD,EACD,qBAAKC,UAAU,SAAf,SACE,eAAC,IAAD,CAAQC,QAASrB,KAAKF,sBAAuBwB,QAAQ,OAArD,wFACkBpC,EAAW,2BAAS,6CAGvC+B,EACAF,EACD,uBAAMQ,SAAUvB,KAAKN,cAArB,UACGe,EACD,cAAC,IAAD,0D,GA7IOe,aA2KJC,uBAfS,SAACtD,GACvB,MAAO,CACL8B,QAAS9B,EAAMuD,KAAKzB,QACpBC,MAAO/B,EAAMuD,KAAKxB,MAClBC,OAA6B,OAArBhC,EAAMuD,KAAKC,UAII,SAACC,GAC1B,MAAO,CACL/B,OAAQ,SAACxB,EAAOW,EAAUE,GAAlB,OACN0C,EAASC,IAAaxD,EAAOW,EAAUE,QAI9BuC,CAA6CvD","file":"static/js/4.e2cbdd4b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Auth.scss\";\r\nimport * as actions from \"../../store/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { checkValidity } from \"../../shared/Validity\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport ScrollToTopOnMount from \"../../shared/ScrollToTopOnMount\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"ایمیل آدرس\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"رمز عبور\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignup: true,\r\n  };\r\n\r\n  inputChangedHandler = (e, controlName) => {\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n\r\n      // update only one input\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: e.target.value,\r\n        valid: checkValidity(\r\n          e.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      },\r\n    };\r\n\r\n    this.setState({\r\n      controls: updatedControls,\r\n    });\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        isSignup: !prevState.isSignup,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { loading, error, isAuth } = this.props;\r\n    const { controls, isSignup } = this.state;\r\n\r\n    // convert object of objects into array of objects\r\n    const formElementsArray = [];\r\n    for (let key in controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(e) => this.inputChangedHandler(e, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    // Display Spinner\r\n    if (loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    // Display Firebase Error Message\r\n    let errorMessage = null;\r\n    if (error) {\r\n      errorMessage = <p>{error.message}</p>;\r\n    }\r\n\r\n    // redirect after signin/login\r\n    let authRedirect = null;\r\n    if (isAuth) {\r\n      authRedirect = <Redirect to=\"/\" />;\r\n    }\r\n\r\n    let title = (\r\n      <h1 className=\"auth-title\">\r\n        شما تا الان حساب کاربری ندارید ؟ پس هم اکنون بسازید\r\n      </h1>\r\n    );\r\n    if (!isSignup)\r\n      title = (\r\n        <h1 className=\"auth-title\">حساب کاربری دارید ؟ هم اکنون وارد شوید</h1>\r\n      );\r\n\r\n    return (\r\n      <>\r\n        <ScrollToTopOnMount />\r\n        <div className=\"auth-container\">\r\n          {title}\r\n          <div className=\"switch\">\r\n            <Button clicked={this.switchAuthModeHandler} btnType=\"dark\">\r\n              تغییر وضعیت به {isSignup ? \"ورود\" : \"ثبت نام\"}\r\n            </Button>\r\n          </div>\r\n          {authRedirect}\r\n          {errorMessage}\r\n          <form onSubmit={this.submitHandler}>\r\n            {form}\r\n            <Button>تایید</Button>\r\n          </form>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nAuth.propTypes = {\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.object,\r\n  isAuth: PropTypes.bool.isRequired,\r\n  onAuth: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}